package ch.atdit.schulnetzclient;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;
import lombok.Setter;

import javax.swing.*;
import java.awt.*;

@Getter
@Setter
public class Frame {
    private JPanel lessonsField;
    private JPanel eventsField;
    private JPanel notenField;
    private JPanel Panel;
    private JProgressBar currentLessonProgressBar;
    private JLabel currentLessonLabel;
    private JLabel currentDayLabel;
    private JProgressBar currentDayProgressBar;
    private JTextArea eventsText;
    private JButton allExamsButton;
    private JTextArea notenText;
    private JTable lektionenTable;
    private JLabel untilHolidaysLabel;
    private JProgressBar untilHolidaysProgressBar;
    private JButton allExcursionsButton;
    private JButton allHolidaysButton;
    private JButton allBirthdaysButton;
    private JButton addEventButton;
    private JButton removeEventButton;
    private JButton allHausaufgabenButton;
    private JButton settingsButton;
    private JButton allCustomButton;
    private JButton previousButton;
    private JButton nextButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Panel = new JPanel();
        Panel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.setOpaque(true);
        Panel.setPreferredSize(new Dimension(780, 460));
        Panel.setRequestFocusEnabled(true);
        Panel.setVerifyInputWhenFocusTarget(true);
        lessonsField = new JPanel();
        lessonsField.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(lessonsField, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(296, 177), null, 0, false));
        lessonsField.setBorder(BorderFactory.createTitledBorder("Lektionen"));
        currentLessonLabel = new JLabel();
        currentLessonLabel.setText("Lektion: ");
        lessonsField.add(currentLessonLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        currentLessonProgressBar = new JProgressBar();
        currentLessonProgressBar.setString("Fehler");
        currentLessonProgressBar.setStringPainted(true);
        currentLessonProgressBar.setValue(100);
        lessonsField.add(currentLessonProgressBar, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(189, 19), null, 0, false));
        currentDayLabel = new JLabel();
        currentDayLabel.setText("Tag:");
        lessonsField.add(currentDayLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        currentDayProgressBar = new JProgressBar();
        currentDayProgressBar.setString("Fehler");
        currentDayProgressBar.setStringPainted(true);
        currentDayProgressBar.setValue(100);
        lessonsField.add(currentDayProgressBar, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(189, 19), null, 0, false));
        untilHolidaysLabel = new JLabel();
        untilHolidaysLabel.setText("Ferien:");
        lessonsField.add(untilHolidaysLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lektionenTable = new JTable();
        lektionenTable.setAutoCreateRowSorter(false);
        lektionenTable.setAutoResizeMode(0);
        lektionenTable.setBackground(new Color(-986896));
        lektionenTable.setEnabled(false);
        Font lektionenTableFont = this.$$$getFont$$$("Segoe UI", Font.PLAIN, 16, lektionenTable.getFont());
        if (lektionenTableFont != null) lektionenTable.setFont(lektionenTableFont);
        lektionenTable.setGridColor(new Color(-16777216));
        lektionenTable.setShowHorizontalLines(true);
        lektionenTable.setShowVerticalLines(false);
        lektionenTable.setUpdateSelectionOnSort(false);
        lessonsField.add(lektionenTable, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        untilHolidaysProgressBar = new JProgressBar();
        untilHolidaysProgressBar.setString("Fehler");
        untilHolidaysProgressBar.setStringPainted(true);
        untilHolidaysProgressBar.setValue(100);
        lessonsField.add(untilHolidaysProgressBar, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(189, 19), null, 0, false));
        eventsField = new JPanel();
        eventsField.setLayout(new GridLayoutManager(4, 6, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(eventsField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        eventsField.setBorder(BorderFactory.createTitledBorder("Events"));
        eventsText = new JTextArea();
        eventsText.setBackground(new Color(-986896));
        eventsText.setEditable(false);
        eventsText.setEnabled(true);
        eventsText.setFocusable(false);
        Font eventsTextFont = this.$$$getFont$$$("Segoe UI", Font.PLAIN, 12, eventsText.getFont());
        if (eventsTextFont != null) eventsText.setFont(eventsTextFont);
        eventsText.setForeground(new Color(-16777216));
        eventsText.setLineWrap(false);
        eventsText.setText("Fehler beim Laden der Events.");
        eventsField.add(eventsText, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        allExamsButton = new JButton();
        allExamsButton.setText("Tests");
        eventsField.add(allExamsButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allExcursionsButton = new JButton();
        allExcursionsButton.setText("Exk.");
        eventsField.add(allExcursionsButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allHolidaysButton = new JButton();
        allHolidaysButton.setText("Ferien");
        eventsField.add(allHolidaysButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allBirthdaysButton = new JButton();
        allBirthdaysButton.setText("Geb.");
        eventsField.add(allBirthdaysButton, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addEventButton = new JButton();
        addEventButton.setText("Event hinzufÃ¼gen");
        eventsField.add(addEventButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allHausaufgabenButton = new JButton();
        allHausaufgabenButton.setText("Hausaufgaben");
        eventsField.add(allHausaufgabenButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeEventButton = new JButton();
        removeEventButton.setText("Event entfernen");
        eventsField.add(removeEventButton, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Einstellungen");
        eventsField.add(settingsButton, new GridConstraints(3, 4, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allCustomButton = new JButton();
        allCustomButton.setText("Spezielles");
        eventsField.add(allCustomButton, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        previousButton = new JButton();
        previousButton.setEnabled(false);
        previousButton.setText("Vorher");
        eventsField.add(previousButton, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextButton = new JButton();
        nextButton.setText("Nachher");
        eventsField.add(nextButton, new GridConstraints(1, 3, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        notenField = new JPanel();
        notenField.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(notenField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        notenField.setBorder(BorderFactory.createTitledBorder("Noten"));
        notenText = new JTextArea();
        notenText.setBackground(new Color(-986896));
        notenText.setEditable(false);
        notenText.setEnabled(true);
        notenText.setFocusable(false);
        Font notenTextFont = this.$$$getFont$$$("Segoe UI", Font.PLAIN, 12, notenText.getFont());
        if (notenTextFont != null) notenText.setFont(notenTextFont);
        notenText.setForeground(new Color(-16777216));
        notenText.setLineWrap(false);
        notenText.setText("Fehler beim Laden der Noten.");
        notenField.add(notenText, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Panel;
    }

}
